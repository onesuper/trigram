// Generated by CoffeeScript 1.7.1
(function() {
  var Memory, Reg, add, address, br, i, jmp, jsr, jsrr, ld, ldi, ldr, lea, ret, setcc, st, sti, str, trap, _and, _i, _j, _not;

  Reg = (function() {
    function Reg(name) {
      this.name = name;
      this.value = 0;
      $('#' + this.name).text('0x0000');
    }

    Reg.prototype.read = function() {
      return this.value;
    };

    Reg.prototype.write = function(value) {
      $('#' + this.name).text('0x' + ('0000' + value.toString(16).toUpperCase()).substr(-4));
      return this.value = value;
    };

    return Reg;

  })();

  Memory = (function() {
    function Memory() {
      this.words = new Uint32Array(1 << 16);
    }

    Memory.prototype.read = function(offset) {
      return this.words[offset];
    };

    Memory.prototype.write = function(offset, value) {
      $('#mem' + offset).text('0x' + ('0000' + value.toString(16).toUpperCase()).substr(-4));
      return this.words[offset] = value;
    };

    return Memory;

  })();

  setcc = function(val) {
    if (val < 0) {
      lc3.N = true;
    }
    if (val === 0) {
      lc3.Z = true;
    }
    if (val > 0) {
      return lc3.P = true;
    }
  };

  add = function(dest, src1, src2) {
    var val;
    if (typeof src2 === "number") {
      val = dest.write(src1.read() + src2);
    } else {
      val = dest.write(src1.read() + src2.read());
    }
    return setcc(val);
  };

  _and = function(dest, src1, src2) {
    var val;
    if (typeof src2 === "number") {
      val = dest.write(src1.read() && src2);
    } else {
      val = dest.write(src1.read() && src2.read());
    }
    return setcc(val);
  };

  br = function(n, z, p, pcoffset) {
    if (n && lc3.n || z && lc3.Z || p && lc3.P) {
      return lc3.PC += pcoffset;
    }
  };

  jmp = function(baseR) {
    return lc3.PC = baseR.read();
  };

  jsr = function(pcoffset) {
    lc3.R7 = lc3.PC;
    return lc3.PC += pcoffset;
  };

  jsrr = function(baseR) {
    lc3.R7 = lc3.PC;
    return lc3.PC = baseR.read();
  };

  ld = function(dest, pcoffset) {
    var tmp, val;
    tmp = lc3.mem.read(lc3.PC + pcoffset);
    val = dest.write(tmp);
    return setcc(val);
  };

  ldi = function(dest, pcoffset) {
    var addr, tmp, val;
    addr = lc3.mem.read(lc3.PC + pcoffset);
    tmp = lc3.mem.read(addr);
    val = dest.write(tmp);
    return setcc(val);
  };

  ldr = function(dest, baseR, pcoffset) {
    var tmp, val;
    tmp = lc3.mem.read(baseR.read() + pcoffset);
    val = dest.write(tmp);
    return setcc(val);
  };

  lea = function(dest, pcoffset) {
    var val;
    val = dest.write(lc3.PC + pcoffset);
    return setcc(val);
  };

  _not = function(dest, src) {
    var val;
    val = dest.write(~src.read());
    return setcc(val);
  };

  ret = function() {
    return lc3.PC = lc3.R7;
  };

  st = function(src, pcoffset) {
    var addr;
    addr = lc3.PC + pcoffset;
    return lc3.mem.write(lc3.PC + pcoffset, src.read());
  };

  sti = function(src, pcoffset) {
    var addr;
    addr = lc3.mem.read(lc3.PC + pcoffset);
    return lc3.mem.write(addr, src.read());
  };

  str = function(src, baseR, offset) {
    var addr;
    addr = baseR.read() + offset;
    return lc3.mem.write(addr, src.read());
  };

  trap = function(vector) {
    lc3.R7 = lc3.PC;
    return lc3.PC = lc3.mem.read(vector);
  };

  console.log("Welcome to LC-3's world");

  lc3.R0 = new Reg('R0');

  lc3.R1 = new Reg('R1');

  lc3.R2 = new Reg('R2');

  lc3.R3 = new Reg('R3');

  lc3.R4 = new Reg('R4');

  lc3.R5 = new Reg('R5');

  lc3.R6 = new Reg('R6');

  lc3.R7 = new Reg('R7');

  lc3.PC = 0;

  lc3.N = false;

  lc3.Z = false;

  lc3.P = false;

  lc3.PSR = 0;

  lc3.add = add;

  lc3.and = _and;

  lc3.br = br;

  lc3.jsr = jsr;

  lc3.jsrr = jsrr;

  lc3.ld = ld;

  lc3.ldi = ldi;

  lc3.ldr = ldr;

  lc3.lea = lea;

  lc3.not = _not;

  lc3.ret = ret;

  lc3.st = st;

  lc3.sti = sti;

  lc3.str = str;

  lc3.trap = trap;

  lc3.mem = new Memory;

  for (address = _i = 0; _i < 256; address = ++_i) {
    $('#memory-table').append('<tr><td class="mem-address">' + ("0000" + address.toString(16).toUpperCase()).substr(-4) + '</td><td class="mem-content" id="mem' + address + '">0x' + ('0000' + lc3.mem.words[address].toString(16)).substr(-4) + '</td></tr>');
  }

  for (i = _j = 0; _j < 256; i = ++_j) {
    $('#memory-selector').append('<option value="' + i + '">0x' + ("00" + i.toString(16).toUpperCase()).substr(-2) + '</option>');
  }

  $('#memory-selector').on('change', (function(_this) {
    return function(evt) {
      var end, start, _k, _results;
      $('#memory-table').empty();
      start = $('#memory-selector').val() * (1 << 8);
      end = start + (1 << 8);
      _results = [];
      for (address = _k = start; start <= end ? _k < end : _k > end; address = start <= end ? ++_k : --_k) {
        _results.push($('#memory-table').append('<tr><td class="mem-address">' + ("0000" + address.toString(16).toUpperCase()).substr(-4) + '</td><td class="mem-content">0x' + ('0000' + lc3.mem.words[address].toString(16)).substr(-4) + '</td></tr>'));
      }
      return _results;
    };
  })(this));

}).call(this);
