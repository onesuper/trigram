// Generated by CoffeeScript 1.7.1
(function() {
  var Decoder, Memory, Reg, add, address, i, _i, _j;

  Reg = (function() {
    function Reg(name) {
      this.name = name;
      this.value = 0;
      $('#' + this.name).text('0x0000');
    }

    Reg.prototype.read = function() {
      return this.value;
    };

    Reg.prototype.write = function(value) {
      $('#' + this.name).text('0x' + ('0000' + value.toString(16).toUpperCase()).substr(-4));
      return this.value = value;
    };

    return Reg;

  })();

  Memory = (function() {
    function Memory() {
      this.words = new Uint32Array(1 << 16);
    }

    Memory.prototype.read = function(offset) {
      return this.words[offset];
    };

    Memory.prototype.write = function(offset, value) {
      $('#mem' + offset).text('0x' + ('0000' + value.toString(16).toUpperCase()).substr(-4));
      return this.words[offset] = value;
    };

    return Memory;

  })();

  Decoder = (function() {
    function Decoder(bincode) {
      this.bincode = bincode;
    }

    Decoder.prototype.decode = function() {
      switch (this.Op()) {
        case 0x1:
          if (this.steer5() === 0) {
            return console.log('R#{DR} = R#{SR1} + R#{SR2}');
          } else {
            return console.log('R#{@DR} = R#{@SR1} + #{@imm5}');
          }
          break;
        case 0x5:
          if (this.steer5 === 0) {
            return console.log('R#{@DR} = R#{@SR1} && R#{@SR2}');
          } else {
            return console.log('R#{@DR} = R#{@SR1} && #{@imm5}');
          }
          break;
        case 0x0:
          return console.log('n=#{@nflag}, z=#{@zflag}, p=#{@pflag}, go #{@PCoffset9}');
        case 0xc:
          return console.log('go R#{@BaseR}');
        case 0x4:
          if (this.steer11 === 1) {
            return console.log('call fun #{@PCoffset11}');
          } else {
            return console.log('call fun R#{@BaseR}');
          }
          break;
        case 0x2:
          return console.log('R#{@DR} = *[#{@PCoffset9}]');
        case 0xa:
          return console.log('R#{@DR} = **[#{@PCoffset9}]');
        case 0x6:
          return console.log('R#{@DR} = [R#{@BaseR} + #{@offset6}]');
        case 0xe:
          return console.log('R#{@DR} = #{@PCoffset9}');
        case 0x9:
          return console.log('R#{@DR} = ~ ${@SR}');
        case 0xc:
          return console.log('return');
        case 0x8:
          return console.log('rti');
        case 0x3:
          return console.log('[#{@PCoffset9}] = R#{@SR}');
        case 0xb:
          return console.log('**[#{@PCoffset9}] = R#{@SR}');
        case 0x7:
          return console.log('[R#{@BaseR} + #{@offset6}] = R#{@SR}');
        case 0xf:
          return console.log('trap #{@Trapvec8}');
      }
    };

    Decoder.prototype.Op = function() {
      return this.bincode >> 12;
    };

    Decoder.prototype.DR = function() {
      return this.bincode << 4 >> 13;
    };

    Decoder.prototype.SR = function() {
      return this.bincode << 4 >> 13;
    };

    Decoder.prototype.SR1 = function() {
      return this.bincode << 7 >> 13;
    };

    Decoder.prototype.SR2 = function() {
      return this.bincode << 13 >> 13;
    };

    Decoder.prototype.imm5 = function() {
      return this.bincode << 11 >> 11;
    };

    Decoder.prototype.PCoffset9 = function() {
      return this.bincode << 7 >> 7;
    };

    Decoder.prototype.PCoffset11 = function() {
      return this.bincode << 5 >> 5;
    };

    Decoder.prototype.Trapvec8 = function() {
      return this.bincode << 8 >> 8;
    };

    Decoder.prototype.nflag = function() {
      return this.bincode << 4 >> 15;
    };

    Decoder.prototype.zflag = function() {
      return this.bincode << 5 >> 15;
    };

    Decoder.prototype.pflag = function() {
      return this.bincode << 6 >> 15;
    };

    Decoder.prototype.BaseR = function() {
      return this.bincode << 7 >> 13;
    };

    Decoder.prototype.offset6 = function() {
      return this.bincode << 10 >> 10;
    };

    Decoder.prototype.steer5 = function() {
      return this.bincode << 10 >> 15;
    };

    Decoder.prototype.steer11 = function() {
      return this.bincode << 4 >> 15;
    };

    return Decoder;

  })();

  console.log("Welcome to LC-3's world");

  lc3.regfile = {
    R0: new Reg('R0'),
    R1: new Reg('R1'),
    R2: new Reg('R2'),
    R3: new Reg('R3'),
    R4: new Reg('R4'),
    R5: new Reg('R5'),
    R6: new Reg('R6'),
    R7: new Reg('R7')
  };

  lc3.mem = new Memory;

  for (address = _i = 0; _i < 256; address = ++_i) {
    $('#memory-table').append('<tr><td class="mem-address">' + ("0000" + address.toString(16).toUpperCase()).substr(-4) + '</td><td class="mem-content" id="mem' + address + '">0x' + ('0000' + lc3.mem.words[address].toString(16)).substr(-4) + '</td></tr>');
  }

  for (i = _j = 0; _j < 256; i = ++_j) {
    $('#memory-selector').append('<option value="' + i + '">0x' + ("00" + i.toString(16).toUpperCase()).substr(-2) + '</option>');
  }

  $('#memory-selector').on('change', (function(_this) {
    return function(evt) {
      var end, start, _k, _results;
      $('#memory-table').empty();
      start = $('#memory-selector').val() * (1 << 8);
      end = start + (1 << 8);
      _results = [];
      for (address = _k = start; start <= end ? _k < end : _k > end; address = start <= end ? ++_k : --_k) {
        _results.push($('#memory-table').append('<tr><td class="mem-address">' + ("0000" + address.toString(16).toUpperCase()).substr(-4) + '</td><td class="mem-content">0x' + ('0000' + lc3.mem.words[address].toString(16)).substr(-4) + '</td></tr>'));
      }
      return _results;
    };
  })(this));

  add = function(dest, src1, src2) {
    return dest.write(src1.read() + src2.read());
  };

  lc3.add = add;

}).call(this);
